<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>rsontech.net</title>
    <link>http://rsontech.net/feeds/rss/</link>
    <description>All articles on rsontech.net</description>
    <atom:link href="http://rsontech.net/feeds/rss/" rel="self"/>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Oct 2013 00:00:00 -0400</lastBuildDate>
    
    <item>
      <title>I Made a Thing</title>
      <link>http://rsontech.net//2013/10/07/i-made-a-thing.html</link>
      <description>
        &lt;p&gt;I wanted to dig into some new (to me) front end web technologies and tools so I made &lt;a href='http://spoolio.bitbucket.org/'&gt;a thing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have you ever happened across a new library or an interesting blog post and wanted to know what other people think? I seem to do this all the time and finding discussions about a random website isn&amp;#8217;t always as quick as I&amp;#8217;d like. I wanted something that would search both &lt;a href='http://news.ycombinator.org/'&gt;Hacker News&lt;/a&gt; and &lt;a href='http://reddit.com/'&gt;Reddit&lt;/a&gt; for me and give me links to the latest discussions about whatever it is I&amp;#8217;m reading. Now I have it.&lt;/p&gt;

&lt;h2 id='introducting_spoolio'&gt;Introducting Spoolio&lt;/h2&gt;

&lt;p&gt;The whole thing is ridiculously simple. Paste in a url, it returns links to discussions. It does everything in JavaScript and stores the results in localstorage so there is no server portion. This means there is no login, no users, not much of anything really. Unfortunatley using only JavaScript also means that the title shown is just a title from one of the submissions rather than the actual title (damn you security).&lt;/p&gt;

&lt;p&gt;I tried out &lt;a href='http://yeoman.io/'&gt;Yeoman&lt;/a&gt;, &lt;a href='http://gruntjs.com/'&gt;Grunt&lt;/a&gt;, and &lt;a href='http://bower.io/'&gt;Bower&lt;/a&gt; for the first time. Right now I think it&amp;#8217;s a little much for me but if I took a little more time I think I could get more used to it. Don&amp;#8217;t look at the source if you&amp;#8217;re familiar with these tools. I got really lazy and didn&amp;#8217;t finish making things work properly so there are artifacts everywhere.&lt;/p&gt;

&lt;p&gt;One thing I would be interested in is any feedback on the tiny bit of &lt;a href='http://angularjs.org/'&gt;Angular&lt;/a&gt; code. This is my first foray into the wonderful world of JavaScript frameworks as well and at this point it feels a little awkward. I like it, I just feel like I&amp;#8217;m doing something incredibly wrong.&lt;/p&gt;

&lt;p&gt;Either way, &lt;a href='http://spoolio.bitbucket.org/'&gt;give it a try&lt;/a&gt;. I don&amp;#8217;t really expect anyone to use it but it&amp;#8217;s there if it helps anyone.&lt;/p&gt;
      </description>
      <author>randy@rsontech.net (Randy Morris)</author>
      <pubDate>Mon, 07 Oct 2013 00:00:00 -0400</pubDate>
      <guid>http://rsontech.net//2013/10/07/i-made-a-thing.html</guid>
    </item>
    
    <item>
      <title>Effective Emacs in Windows 7</title>
      <link>http://rsontech.net//2013/01/09/effective-emacs-in-windows-7.html</link>
      <description>
        &lt;p&gt;There are many posts around the web about how to run Emacs in Windows. While many of these suggest building and running a native version of Emacs, many others suggest running the version available through &lt;a href='http://www.cygwin.com/'&gt;Cygwin&lt;/a&gt;. I tried both approaches many times but always ran into problems with the packages that I use most often. On top of that I was plagued with slowness that just isn&amp;#8217;t there on other platforms. The good news is I&amp;#8217;ve found a happy medium that works quite well for me and this post documents that monster I&amp;#8217;ve created.&lt;/p&gt;

&lt;h2 id='what_i_wanted'&gt;What I wanted&lt;/h2&gt;

&lt;p&gt;My goals for this setup were to make Emacs run on a &amp;#8220;remote&amp;#8221; machine and display on my local Windows install. I also wanted this to be as seamless as possible so that it felt as if I was running a native application. To do this I needed quite a bit of supporting software.&lt;/p&gt;

&lt;h2 id='an_emacs_host'&gt;An Emacs host&lt;/h2&gt;

&lt;p&gt;I used a Linux host, specifically a VirtualBox VM running a minimal Ubuntu server install. Your host is going to need to have an opensshd and X11 installed, with X11 forwarding enabled in &lt;code&gt;sshd_config&lt;/code&gt;. Anyone reading this guide is probably already very familiar with these steps so I&amp;#8217;ll leave out the details.&lt;/p&gt;

&lt;p&gt;I wrote a couple of scripts help make running a VM more bearable. This is VirtualBox specific, but I&amp;#8217;m sure it can be adapted to other virtualization solutions.&lt;/p&gt;

&lt;p&gt;file: &lt;code&gt;EmacsHost.bat&lt;/code&gt; &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bat'&gt;&lt;span class='p'&gt;@&lt;/span&gt;&lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='k'&gt;off&lt;/span&gt;
&lt;span class='s2'&gt;&amp;quot;C:\Program Files\Oracle\VirtualBox\VBoxHeadless.exe&amp;quot;&lt;/span&gt; -s EmacsHost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;This batch file launches the VM named &amp;#8220;EmacsHost&amp;#8221; in headless mode. This means the only access to the machine is through remote services like ssh or vnc. Unfortunately, because it&amp;#8217;s batch, this leaves a command prompt hanging around. To get rid of that I used a bit of VBScript.&lt;/p&gt;

&lt;p&gt;file: &lt;code&gt;EmacsHost.vbs&lt;/code&gt; &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='vbnet'&gt;&lt;span class='k'&gt;set&lt;/span&gt; &lt;span class='n'&gt;WshShell&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;WScript&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;CreateObject&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;WScript.Shell&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;obj&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;WshShell&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;Run&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;c:\path\to\EmacsHost.bat&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='k'&gt;set&lt;/span&gt; &lt;span class='n'&gt;WshShell&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;Nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;Emacs.vbs&lt;/code&gt; runs &lt;code&gt;EmacsHost.bat&lt;/code&gt; in a subprocess and kills off the parent shell.&lt;/p&gt;

&lt;p&gt;I finished off the VM setup by having &lt;code&gt;EmacsHost.vbs&lt;/code&gt; run on boot so it is always running whenever I attempt to run Emacs. The VM is tiny so it starts up immediately and I don&amp;#8217;t worry about powering it off as there isn&amp;#8217;t much to lose on the machine itself.&lt;/p&gt;

&lt;h2 id='putty_and_friends'&gt;PuTTY and friends&lt;/h2&gt;

&lt;p&gt;The &lt;a href='http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html'&gt;PuTTY&lt;/a&gt; project is a set of Windows applications that allow you to connect to remote machines via a number of protocols. You can download the two specific applications you&amp;#8217;ll need directly but I strongly suggest downloading the installer for simplicity&amp;#8217;s sake. From this project I used &lt;code&gt;PuTTYgen&lt;/code&gt; to set up the ssh certificates and &lt;code&gt;plink&lt;/code&gt; to make the connection to launch Emacs.&lt;/p&gt;

&lt;p&gt;Unfortunately PuTTY&amp;#8217;s certificates are incompatible with openssh and there is some work that needs to be done to make a private/public key pair that will work between the machines. There are many resources on setting up these certificates so I won&amp;#8217;t go into details here. Later I reference the private key on Windows as &amp;#8220;EmacsHostKey.ppk&amp;#8221;.&lt;/p&gt;

&lt;h2 id='an_x11_server'&gt;An X11 server&lt;/h2&gt;

&lt;p&gt;In order to have Emacs display on your Windows machine you will need to be running an X11 server. I chose &lt;a href='http://x.cygwin.com/'&gt;Cygwin/X&lt;/a&gt; since I had Cygwin installed for other reasons already. I also chose to launch the X server on startup at the same time as my VM, for the same reasons.&lt;/p&gt;

&lt;h2 id='putting_it_all_together'&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;To wrap things up I wrote a couple of scripts to make launching Emacs convenient.&lt;/p&gt;

&lt;p&gt;file: &lt;code&gt;Emacs.bat&lt;/code&gt; &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bat'&gt;&lt;span class='p'&gt;@&lt;/span&gt;&lt;span class='k'&gt;echo&lt;/span&gt; &lt;span class='k'&gt;off&lt;/span&gt;
plink -l user -X -i c:\path\to\EmacsHostKey.ppk localhost &lt;span class='s2'&gt;&amp;quot;emacsclient -c -a &amp;#39;&amp;#39;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;file: &lt;code&gt;Emacs.vbs&lt;/code&gt; &lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='vbnet'&gt;&lt;span class='k'&gt;set&lt;/span&gt; &lt;span class='n'&gt;WshShell&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;WScript&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;CreateObject&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;WScript.Shell&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='n'&gt;obj&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='n'&gt;WshShell&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;Run&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;c:\path\to\Emacs.bat&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='k'&gt;set&lt;/span&gt; &lt;span class='n'&gt;WshShell&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;Nothing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;With a running X server and a running VM, double clicking on &lt;code&gt;Emacs.vbs&lt;/code&gt; in an Explorer window will launch emacsclient on the VM and display it on the Windows machine..&lt;/p&gt;

&lt;h2 id='whats_left'&gt;What&amp;#8217;s left?&lt;/h2&gt;

&lt;p&gt;One slight annoyance is that pinning Emacs to the taskbar doesn&amp;#8217;t work as expected. With Cygwin/X, pinning it actually pins an Xwin instance to the taskbar and clicking this doesn&amp;#8217;t launch Emacs. To fix this I found an odd workaround somewhere on the &lt;a href='http://emacswiki.org/'&gt;Emacs Wiki&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Right click on the pinned XWin icon on the taskbar.&lt;/li&gt;

&lt;li&gt;Right click on the Xwin entry at the top of the popup menu.&lt;/li&gt;

&lt;li&gt;Select properties option.&lt;/li&gt;

&lt;li&gt;Modify the &amp;#8220;Target&amp;#8221; field to point to &lt;code&gt;Emacs.vbs&lt;/code&gt;.&lt;/li&gt;

&lt;li&gt;Optional: Select the &amp;#8220;Change Icon&amp;#8221; button and select an Emacs icon file.&lt;/li&gt;

&lt;li&gt;Optional: Select the &amp;#8220;General&amp;#8221; tab.&lt;/li&gt;

&lt;li&gt;Optional: Modify the first field to be &amp;#8220;Emacs&amp;#8221; instead of &amp;#8220;Xwin&amp;#8221;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After a reboot (or restart of explorer.exe) the pinned Emacs icon functions just as any other pinned application.&lt;/p&gt;

&lt;h2 id='the_result'&gt;The result&lt;/h2&gt;

&lt;p&gt;After following these steps I&amp;#8217;m left with is an Emacs that behaves as though it is a native Windows application without the slowness or incompatibilities I ran into with a native Emacs build.&lt;/p&gt;

&lt;h2 id='notes'&gt;Notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I haven&amp;#8217;t done anything new here. This is the result of smashing ideas together that I found through months of searching for solutions for my frustrations. I intend on attempting to credit peices of this as I have time to try to find the original sources. I would be very surprised if all of this information can&amp;#8217;t be found on &lt;a href='http://stackoverflow.com/'&gt;StackOverflow&lt;/a&gt; or &lt;a href='http://emacswiki.org/'&gt;the wiki&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;I chose to run Emacs in daemon/client mode but that&amp;#8217;s totally optional. Just change &amp;#8220;emacsclient&amp;#8221; to &amp;#8220;emacs&amp;#8221; if you don&amp;#8217;t want this behavior.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;You don&amp;#8217;t really need to run a VM if you have access to a unix host. Theoretically, running a VM greatly reduces network lag and makes Emacs feel much more snappy but I have yet to try a true host in practice.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;I actually have taken this a step further and set up a folder that is shared between EmacsHost and my Windows installation. This allows me to access my files from other applications in Windows if need be. I&amp;#8217;ll leave this as an exercise for the reader.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any questions or suggestions on how I could improve either this setup or the guide itself speak up.&lt;/p&gt;
      </description>
      <author>randy@rsontech.net (Randy Morris)</author>
      <pubDate>Wed, 09 Jan 2013 00:00:00 -0500</pubDate>
      <guid>http://rsontech.net//2013/01/09/effective-emacs-in-windows-7.html</guid>
    </item>
    
    <item>
      <title>Why Emacs?</title>
      <link>http://rsontech.net//2012/07/18/why-emacs.html</link>
      <description>
        &lt;p&gt;After a couple of months of using emacs as my primary editor I&amp;#8217;ve finally settled down. I am as comfortable now with emacs as I was with vim when I made the switch. With that in mind, I feel like I need to explain why I&amp;#8217;m sticking with it. Hopefully I&amp;#8217;ll be able to convey this in a way that a vim power user might appreciate.&lt;/p&gt;

&lt;p&gt;I understand now that comparing vim and emacs is ridiculous. Vim is an editor. Emacs is a host for running elisp applications.&lt;/p&gt;

&lt;p&gt;When I was a vim user I thought it was nonsense that so many emacs users claimed that they hardly ever left emacs. Now it&amp;#8217;s perfectly clear to me why they&amp;#8217;d make such a claim. When you start using applications within emacs (such as an irc client, news reader, or calendar) you suddenly have a single, unified set of keybinds across all of your tools. Switching between chat windows and switching between text files use the exact same mechanism. Even switching between applications works the same way. Chances are you will probably be editing some text in those applications. Since you&amp;#8217;re already inside emacs you get a familiar set of editing bindings &amp;#8211;including your personal configuration&amp;#8211; for free, in every application. This is something I&amp;#8217;ve fought for years to achieve.&lt;/p&gt;

&lt;p&gt;Another reason I consider emacs to be more of an environment is that it was designed from the ground up to be extended. Emacs provides hooks (similar to autocmd events in vimscript) for almost anything you can think of. These allow you to run arbitrary elisp when specific events happen. On top of that, elisp allows you to modify literally any function to add functionality without having to rewrite the entire function. This is called &amp;#8220;advising&amp;#8221; the function. The power that this gives you is really hard to convey because there isn&amp;#8217;t any concept of this in vim.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m not an advocate of pushing people into making the switch to emacs. That being said, &lt;a href='https://twitter.com/magnars'&gt;Magnar Sveen&lt;/a&gt; summed up my thoughts pretty well in one of his talks on &lt;a href='http://emacsrocks.com'&gt;Emacs Rocks&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;God damn it, you&amp;#8217;re a programmer. Start using an editor you can damn well program.&lt;/p&gt;
&lt;/blockquote&gt;
      </description>
      <author>randy@rsontech.net (Randy Morris)</author>
      <pubDate>Wed, 18 Jul 2012 00:00:00 -0400</pubDate>
      <guid>http://rsontech.net//2012/07/18/why-emacs.html</guid>
    </item>
    
    <item>
      <title>Migrated to Jekyll</title>
      <link>http://rsontech.net//2012/05/22/migrated-to-jekyll.html</link>
      <description>
        &lt;p&gt;If you&amp;#8217;re reading this that means the site&amp;#8217;s transition to Jekyll is complete. Over the past couple of days I&amp;#8217;ve been working on migrating my old &lt;a href='http://flask.pocoo.org/'&gt;flask&lt;/a&gt;+&lt;a href='http://packages.python.org/Flask-FlatPages/'&gt;flatpages&lt;/a&gt; implementation over to &lt;a href='http://jekyllrb.com'&gt;Jekyll&lt;/a&gt; and I will now be hosting everything on GitHub. Everything is pretty much the same with a few minor visual changes.&lt;/p&gt;

&lt;p&gt;Comment threads will be broken until I get the time to remap them with Disqus but eventually I&amp;#8217;ll have all four comments back to their respective articles.&lt;/p&gt;

&lt;p&gt;As always, please let me know if you notice any residual issues.&lt;/p&gt;
      </description>
      <author>randy@rsontech.net (Randy Morris)</author>
      <pubDate>Tue, 22 May 2012 00:00:00 -0400</pubDate>
      <guid>http://rsontech.net//2012/05/22/migrated-to-jekyll.html</guid>
    </item>
    
    <item>
      <title>Ctrl-C is not Escape</title>
      <link>http://rsontech.net//2012/05/13/ctrl-c-is-not-escape.html</link>
      <description>
        &lt;p&gt;I&amp;#8217;d like to think I&amp;#8217;m not one to be pedantic about things, but there&amp;#8217;s one common misconception that has been making the rounds that annoys me to no end. &lt;code&gt;Ctrl-c&lt;/code&gt; is not equivalent to &lt;code&gt;Escape&lt;/code&gt;. There are two key differences that can be demonstrated by the following two snippets.&lt;/p&gt;
&lt;p class='text-danger'&gt;&lt;strong&gt;Ctrl-c skips any pending insert mode abbreviations.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In a vim session type the following:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='vim'&gt;&lt;span class='p'&gt;:&lt;/span&gt;iabbrev teh the
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a common misspelling and an oft used abbreviation. Now enter insert mode and type &lt;code&gt;teh&amp;lt;Space&amp;gt;&lt;/code&gt;. Notice that the space completed the abbreviation and it now says &lt;code&gt;the&lt;/code&gt; instead of &lt;code&gt;teh&lt;/code&gt;. Now do the same but instead insert &lt;code&gt;teh&amp;lt;Esc&amp;gt;&lt;/code&gt;. The abbreviation still happens. Do the same with &lt;code&gt;teh&amp;lt;Ctrl-c&amp;gt;&lt;/code&gt;. The abbreviation is not completed.&lt;/p&gt;
&lt;p class='text-danger'&gt;&lt;strong&gt;Ctrl-c does not fire the InsertLeave autocmd event.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dump the following snipped into &amp;#8220;cursorline.vim&amp;#8221; and launch vim with &amp;#8220;vim -u cursorline.vim&amp;#8221;.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='vim'&gt;augroup CursorLine     
    autocmd&lt;span class='p'&gt;!&lt;/span&gt;
    autocmd &lt;span class='nb'&gt;InsertEnter&lt;/span&gt; * &lt;span class='k'&gt;set&lt;/span&gt; &lt;span class='nb'&gt;nocursorline&lt;/span&gt;
    autocmd &lt;span class='nb'&gt;InsertLeave&lt;/span&gt; * &lt;span class='k'&gt;set&lt;/span&gt; &lt;span class='nb'&gt;cursorline&lt;/span&gt;
augroup END
&lt;span class='k'&gt;set&lt;/span&gt; &lt;span class='nb'&gt;cursorline&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This snippet enables &amp;#8216;cursorline&amp;#8217; while in normal mode and disables it in insert mode. If you go into insert mode and exit with &lt;code&gt;Esc&lt;/code&gt; you&amp;#8217;ll notice that the cursorline is re-enabled, however, if you enter insert mode and exit with &lt;code&gt;Ctrl-c&lt;/code&gt; you&amp;#8217;ll see that it is never re-enabled.&lt;/p&gt;

&lt;p&gt;These two things probably don&amp;#8217;t seem that important to you, but what about the developers of the plugins you use? If you&amp;#8217;re using a plugin that relies on either of these two features you&amp;#8217;re risking some functionality breaking by using &lt;code&gt;Ctrl-c&lt;/code&gt;. If you must use something other than &lt;code&gt;Escape&lt;/code&gt;, use &lt;code&gt;Ctrl-[&lt;/code&gt; instead as these &lt;i&gt;are&lt;/i&gt; equivalent.&lt;/p&gt;
      </description>
      <author>randy@rsontech.net (Randy Morris)</author>
      <pubDate>Sun, 13 May 2012 00:00:00 -0400</pubDate>
      <guid>http://rsontech.net//2012/05/13/ctrl-c-is-not-escape.html</guid>
    </item>
    
    <item>
      <title>Emacs Update</title>
      <link>http://rsontech.net//2012/05/09/emacs-update.html</link>
      <description>
        &lt;p&gt;I figured it&amp;#8217;s about time I post an update regarding my emacs journey now that I&amp;#8217;ve had some time to acclimate myself to a new way of thinking. This is not so much a blog post as it is just a couple of lists showing where I am in my comfort level with emacs thus far.&lt;/p&gt;

&lt;h2 id='things_i_like'&gt;Things I like:&lt;/h2&gt;

&lt;dl&gt;
&lt;dt&gt;Modes&lt;/dt&gt;

&lt;dd&gt;I never thought I would say it but emacs&amp;#8217; modes have finally grown on me. It took a while to get used to but I get it now.&lt;/dd&gt;

&lt;dt&gt;package.el&lt;/dt&gt;

&lt;dd&gt;Emacs 24 comes with a built-in package manager for adding additional features from multiple sources. This is similar to &lt;a href='https://github.com/gmarik/vundle'&gt;Vundle&lt;/a&gt; or &lt;a href='https://github.com/MarcWeber/vim-addon-manager'&gt;vim-addon-manager&lt;/a&gt; except it comes bundled with emacs.&lt;/dd&gt;

&lt;dt&gt;elisp&lt;/dt&gt;

&lt;dd&gt;As much as I may suck at it, I really love elisp. As I learn more and more about lisp I&amp;#8217;m starting to believe that elisp is the only exposure I&amp;#8217;m going to get to lisp programming in the real world. It helps too that vimscript is just &lt;i&gt;awful&lt;/i&gt;.&lt;/dd&gt;

&lt;dt&gt;The yank ring&lt;/dt&gt;

&lt;dd&gt;There is a &lt;a href='http://www.vim.org/scripts/script.php?script_id=1234'&gt;plugin&lt;/a&gt; to emulate this in vim but I never really gave it a chance. My only gripe is that it stomps all over my beloved tmux escape key.&lt;/dd&gt;

&lt;dt&gt;Narrowing&lt;/dt&gt;

&lt;dd&gt;Again, this is available in vim with a &lt;a href='https://github.com/chrisbra/NrrwRgn'&gt;plugin&lt;/a&gt;. This is something I never tried at all because I thought it was useless. Now that I&amp;#8217;m fumbling around in emacs it&amp;#8217;s nice to be able to focus only on a small portion of code at a time if I&amp;#8217;m making sweeping changes. I don&amp;#8217;t have to worry about accidentally changing code I didn&amp;#8217;t mean to. I&amp;#8217;m sure there are better uses for this but right now that&amp;#8217;s where it&amp;#8217;s helped me out.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id='things_i_dont_like'&gt;Things I don&amp;#8217;t like:&lt;/h2&gt;

&lt;dl&gt;
&lt;dt&gt;Ctrl-U&lt;/dt&gt;

&lt;dd&gt;This may just be me being stubborn. I can&amp;#8217;t stand that for many interactive commands I can/have to change their behavior by passing a prefix argument. I&amp;#8217;d much rather just have a different binding for the different behavior.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id='what_you_can_help_me_with'&gt;What you can help me with:&lt;/h2&gt;

&lt;dl&gt;
&lt;dt&gt;Semantic blocks of text&lt;/dt&gt;

&lt;dd&gt;I touched on this in my previous post but it&amp;#8217;s still a sore point for me. In vim these were called text-objects and they were the number one feature for speeding me up. The &lt;a href='https://github.com/magnars/expand-region.el'&gt;expand-region&lt;/a&gt; script has made this a little less of a problem but I&amp;#8217;m still up for hearing better ways of doing things.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;I&amp;#8217;ve left lots of things off but I think these sum up my current status pretty well. I&amp;#8217;m always looking for tips on things I should try, especially on things that aid in navigating around code more quickly. If you have any suggestions please let me know. As always, my current configs can be found on &lt;a href='https://github.com/rson/emacs.d'&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
      </description>
      <author>randy@rsontech.net (Randy Morris)</author>
      <pubDate>Wed, 09 May 2012 00:00:00 -0400</pubDate>
      <guid>http://rsontech.net//2012/05/09/emacs-update.html</guid>
    </item>
    
    <item>
      <title>Changing My Work Flow: Adding Emacs</title>
      <link>http://rsontech.net//2012/03/07/changing-my-work-flow-adding-emacs.html</link>
      <description>
        &lt;p class='alert alert-warning'&gt;
   &lt;b&gt;Disclaimer:&lt;/b&gt;
   I'm new to the Emacs community so some of the following terminology
   may be incorrect.  Please correct me if there is a more proper way to
   describe anything I've mentioned here.
&lt;/p&gt;
&lt;p&gt;Over the past few months I&amp;#8217;ve realized that I am far too easily distracted from my tasks at work. After a little thinking I came to the conclusion that part of my problem was my work flow. I generally had two or three terminals up bouncing around virtual machines and servers so I could test as I worked and inevitably I would end up on my home server chatting away on IRC for large chunks of time. While most people may be able to correct this with a little discipline, I&amp;#8217;ve decided to try something different. One of my coworkers recently made the switch to Emacs and since I&amp;#8217;ve always been curious about the features touted by Emacs users I thought I&amp;#8217;d give it a try too. I instantly saw a huge difference in my focus and concentration.&lt;/p&gt;

&lt;p&gt;Because the driving force behind this change was focus, I have tried to stay away from the typical &amp;#8220;Emacs can and should do everything&amp;#8221; point of view. There are really only two main features that I&amp;#8217;ve been using that go above and beyond a text editor: &lt;em&gt;ansi-term&lt;/em&gt; and &lt;em&gt;TRAMP&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id='ansiterm'&gt;ansi-term&lt;/h2&gt;

&lt;p&gt;As the name suggests, ansi-term is a terminal emulator that can be run inside Emacs. It works almost like any other buffer so moving between normal buffers and the terminal is virtually seamless. This is something I wanted in vim for ages, I even &lt;a href='/2010/05/07/help-shell-window.html'&gt;ranted about it&lt;/a&gt; here once before.&lt;/p&gt;

&lt;p&gt;While it&amp;#8217;s possible to open multiple instances of ansi-term, I have limited myself to only having one running at a time. This has helped me concentrate on one task because I am no longer hopping between different terminals with different ssh sessions running. One terminal, one task. Having a terminal in the editor also allows me to do all my scm tasks without leaving Emacs as well, without having to use some fancy git/svn/whatever mode. I just use the normal command line interface I&amp;#8217;m used to.&lt;/p&gt;

&lt;h2 id='tramp'&gt;TRAMP&lt;/h2&gt;

&lt;p&gt;TRAMP is a really poorly constructed acronym for &amp;#8220;Transparent Remote (file) Access, Multiple Protocol&amp;#8221;. Where the acronym lacks, the execution excels. For you vim users, TRAMP is what netrw really should be. I am able to &amp;#8220;transparently&amp;#8221; edit files on servers without being nagged about passwords or temp files every time I make a change. This is very convenient for me as I do my development almost exclusively on one of our dev servers. I no longer have to choose between opening an ssh session and editing with the remote editor or using sshfs to mount the remote filesystem locally to get a decent editing experience.&lt;/p&gt;

&lt;p&gt;The most important part about TRAMP and ansi-term is that it&amp;#8217;s rather easy to make them work together. Using a tip from the &lt;a href='http://www.emacswiki.org/emacs/AnsiTermHints#toc4'&gt;EmacsWiki&lt;/a&gt; I added a few lines to my bashrc to allow &lt;code&gt;C-x C-f&lt;/code&gt; to automatically open up in TRAMP format in the &lt;code&gt;$PWD&lt;/code&gt; of the remote machine I&amp;#8217;m connected to in ansi-term. This speeds up the process of opening files considerably and is pretty much on par with how I worked with vim previously. The stripped version I use is below.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='k'&gt;function &lt;/span&gt;&lt;span class='nb'&gt;set&lt;/span&gt;-eterm-dir &lt;span class='o'&gt;{&lt;/span&gt;
    &lt;span class='nb'&gt;echo&lt;/span&gt; -e &lt;span class='s2'&gt;&amp;quot;\033AnSiTu&amp;quot;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;$LOGNAME&amp;quot;&lt;/span&gt;
    &lt;span class='nb'&gt;echo&lt;/span&gt; -e &lt;span class='s2'&gt;&amp;quot;\033AnSiTc&amp;quot;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;$(pwd)&amp;quot;&lt;/span&gt;
    &lt;span class='nb'&gt;echo&lt;/span&gt; -e &lt;span class='s2'&gt;&amp;quot;\033AnSiTh&amp;quot;&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;$(hostname -f)&amp;quot;&lt;/span&gt;
    &lt;span class='nb'&gt;history&lt;/span&gt; -a
&lt;span class='o'&gt;}&lt;/span&gt;

&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='o'&gt;[&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;$TERM&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;eterm-color&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;]&lt;/span&gt;; &lt;span class='k'&gt;then&lt;/span&gt;
&lt;span class='k'&gt;    &lt;/span&gt;&lt;span class='nv'&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='nb'&gt;set&lt;/span&gt;-eterm-dir
&lt;span class='k'&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding this to the remote machine&amp;#8217;s bashrc will enable TRAMP to follow the working directory in ansi-term.&lt;/p&gt;

&lt;h2 id='other_benefits'&gt;Other benefits&lt;/h2&gt;

&lt;p&gt;There are a couple of features that I would like to dive in to eventually but haven&amp;#8217;t looked too much at yet. Having a true programming language at my disposal (&lt;a href='http://en.wikipedia.org/wiki/Emacs_Lisp'&gt;elisp&lt;/a&gt;) when customizing my editor is &lt;strong&gt;very&lt;/strong&gt; appealing after spending years of dealing with vimscript. I also would like to look in to Org-mode as it may be another tool to help keep me on track at work.&lt;/p&gt;

&lt;h2 id='moving_forward'&gt;Moving forward&lt;/h2&gt;

&lt;p&gt;Adding Emacs to my work flow has been great for my development tasks but I&amp;#8217;m not ready to move on completely. I fully intend to continue using vim when I&amp;#8217;m logged on to a test or production machine, and really any time I&amp;#8217;m not doing development. I have been using this work flow for the past couple of weeks and it seems pretty natural to me now other than the occasional &lt;code&gt;C-x s&lt;/code&gt; or &lt;code&gt;C-x f&lt;/code&gt; while in vim.&lt;/p&gt;

&lt;p&gt;If you have any questions or suggestions feel free to ping me in the comments or in the usual places. Feel free to watch my &lt;a href='https://github.com/rson/emacs.d'&gt;.emacs.d&lt;/a&gt; grow as I continue to go through this process.&lt;/p&gt;
      </description>
      <author>randy@rsontech.net (Randy Morris)</author>
      <pubDate>Wed, 07 Mar 2012 00:00:00 -0500</pubDate>
      <guid>http://rsontech.net//2012/03/07/changing-my-work-flow-adding-emacs.html</guid>
    </item>
    
    <item>
      <title>Idiomatic vimscript</title>
      <link>http://rsontech.net//2011/11/07/idiomatic-vimscript.html</link>
      <description>
        &lt;p&gt;For those who may be interested, I&amp;#8217;ve created a repo on GitHub where I plan to dump small functions and scripts I write while helping people on irc or on Stack Overflow. In these scripts I will try my hardest to use &amp;#8220;best practices&amp;#8221; so they can be used as examples when writing your own scripts.&lt;/p&gt;

&lt;p&gt;Please let me know if you notice anything you would do differently. The point of this is to serve as digestable examples of proper vimscript.&lt;/p&gt;

&lt;p&gt;Check it out at &lt;a href='http://github.com/rson/vimscript-snippets'&gt;vimscript-snippets&lt;/a&gt;.&lt;/p&gt;
      </description>
      <author>randy@rsontech.net (Randy Morris)</author>
      <pubDate>Mon, 07 Nov 2011 00:00:00 -0500</pubDate>
      <guid>http://rsontech.net//2011/11/07/idiomatic-vimscript.html</guid>
    </item>
    
    <item>
      <title>CtrlP - A Game Changer</title>
      <link>http://rsontech.net//2011/09/12/ctrlp-a-game-changer.html</link>
      <description>
        &lt;p&gt;Recently I was searching for a fuzzy-finding plugin to make working with projects a little easier. I &lt;a href='/2011/08/01/poor-mans-fuzzy-finder.html'&gt;posted a quick hack&lt;/a&gt; that I still use every now and then, however I&amp;#8217;ve recently discovered a rather new plugin called &lt;a href='https://github.com/kien/ctrlp.vim'&gt;CtrlP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the uninitiated, fuzzy-finding plugins allow you to open a file by only typing enough pieces of the path to uniquely identify a file. Sometimes this is as little as one or two characters. I wasn&amp;#8217;t really sold on this behavior until I tried using them at work where we have many files with similar names. A plugin like this makes dealing with such situations much easier to deal with than tab-completion alone.&lt;/p&gt;

&lt;p&gt;CtrlP is written entirely in vimscript. This is a big plus for me because many of the machines at work aren&amp;#8217;t built with &lt;code&gt;+python&lt;/code&gt; or &lt;code&gt;+ruby&lt;/code&gt; which &lt;a href='https://github.com/jamis/fuzzyfinder_textmate/'&gt;some&lt;/a&gt; &lt;a href='https://github.com/sjbach/lusty/'&gt;of&lt;/a&gt; &lt;a href='http://wincent.com/products/command-t/'&gt;the&lt;/a&gt; other fuzzy-finding plugins require. Although it&amp;#8217;s written in vimscript it caches directory and filenames for larger directories and can be configured to always use a cache. This means it&amp;#8217;s quite slow on first launch in larger directories but is very fast on subsequent calls.&lt;/p&gt;

&lt;p&gt;Another big plus is the configurability CtrlP offers. There are (currently) 22 options provided to configure everything from mappings to how caching should work. You can even delegate the file indexing out to a faster external mechanism if you so choose.&lt;/p&gt;

&lt;p&gt;Couple all of this with an active and responsive developer that provides excellent documentation and you&amp;#8217;ve got my current favorite script.&lt;/p&gt;
      </description>
      <author>randy@rsontech.net (Randy Morris)</author>
      <pubDate>Mon, 12 Sep 2011 00:00:00 -0400</pubDate>
      <guid>http://rsontech.net//2011/09/12/ctrlp-a-game-changer.html</guid>
    </item>
    
    <item>
      <title>Lowercase User Defined Commands</title>
      <link>http://rsontech.net//2011/08/03/lowercase-user-defined-commands.html</link>
      <description>
        &lt;p&gt;I&amp;#8217;ve never liked the fact that vim doesn&amp;#8217;t allow users to define commands that start with a lowercase letter. Every time I create one I end up having to also make a &lt;code&gt;cnoreabbrev&lt;/code&gt; that lets me use my lowercase version. This has the ugly side effect of having text transform as you type. It also will make the cursor jump around if you&amp;#8217;re doing more than changing the case of things. For example:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='vim'&gt;cnoreabbrev ack ack&lt;span class='p'&gt;&amp;lt;&lt;/span&gt;&lt;span class='k'&gt;c&lt;/span&gt;&lt;span class='p'&gt;-&lt;/span&gt;\&lt;span class='p'&gt;&amp;gt;&lt;/span&gt;esubstitute&lt;span class='p'&gt;(&lt;/span&gt;getcmdline&lt;span class='p'&gt;(),&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;^ack\&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Ack!&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&amp;lt;&lt;/span&gt;enter&lt;span class='p'&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This allows me to type &amp;#8220;:ack &amp;#8221; and have it automatically change to &amp;#8220;:Ack! &amp;#8221; as soon as I press &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt;. The text changes automatically and my cursor jumps to the right two spaces instead of just one. Obviously this is a small inconvenience but it is an annoying one for me.&lt;/p&gt;

&lt;p&gt;I have come up with a bit of a hacky workaround for this that allows more transparency and I thought I&amp;#8217;d share in case someone out there is as stubborn as me. The following function will run a substitution on the current command line:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='vim'&gt;&lt;span class='k'&gt;function&lt;/span&gt;&lt;span class='p'&gt;!&lt;/span&gt; CommandLineSubstitute&lt;span class='p'&gt;()&lt;/span&gt;
    &lt;span class='k'&gt;let&lt;/span&gt; &lt;span class='k'&gt;cl&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; getcmdline&lt;span class='p'&gt;()&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; exists&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;g:command_line_substitutes&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='k'&gt;for&lt;/span&gt; [&lt;span class='k'&gt;k&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;v&lt;/span&gt;] &lt;span class='k'&gt;in&lt;/span&gt; &lt;span class='k'&gt;g&lt;/span&gt;:command_line_substitutes
            &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='k'&gt;match&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;cl&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;k&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;==&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt;
                &lt;span class='k'&gt;let&lt;/span&gt; &lt;span class='k'&gt;cl&lt;/span&gt; &lt;span class='p'&gt;=&lt;/span&gt; substitute&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;cl&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;k&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='k'&gt;v&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
                &lt;span class='k'&gt;break&lt;/span&gt;
            &lt;span class='k'&gt;endif&lt;/span&gt;
        &lt;span class='k'&gt;endfor&lt;/span&gt;
    &lt;span class='k'&gt;endif&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;cl&lt;/span&gt;
&lt;span class='k'&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function reads search/replace pairs from a global variable you set in your &lt;code&gt;.vimrc&lt;/code&gt;. That global variable looks something like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='vim'&gt;&lt;span class='c'&gt;&amp;quot; note that line continuation is only possible without &amp;#39;C&amp;#39; in &amp;#39;cpoptions&amp;#39;&lt;/span&gt;
&lt;span class='k'&gt;let&lt;/span&gt; &lt;span class='k'&gt;g&lt;/span&gt;:command_line_substitutes &lt;span class='p'&gt;=&lt;/span&gt; [
    \ [&lt;span class='s1'&gt;&amp;#39;^ack &amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Ack! &amp;#39;&lt;/span&gt;]&lt;span class='p'&gt;,&lt;/span&gt;
    \ [&lt;span class='s1'&gt;&amp;#39;^ee \(.\+\)&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;e **/\1*&amp;#39;&lt;/span&gt;]&lt;span class='p'&gt;,&lt;/span&gt;
    \ [&lt;span class='s1'&gt;&amp;#39;^h &amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;vertical help &amp;#39;&lt;/span&gt;]&lt;span class='p'&gt;,&lt;/span&gt;
\]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last thing we need to do is a single map to call this function whenever we press &lt;code&gt;&amp;lt;enter&amp;gt;&lt;/code&gt; on the command line:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='vim'&gt;cnoremap &lt;span class='p'&gt;&amp;lt;&lt;/span&gt;enter&lt;span class='p'&gt;&amp;gt;&lt;/span&gt; &lt;span class='p'&gt;&amp;lt;&lt;/span&gt;&lt;span class='k'&gt;c&lt;/span&gt;&lt;span class='p'&gt;-&lt;/span&gt;\&lt;span class='p'&gt;&amp;gt;&lt;/span&gt;eCommandLineSubstitute&lt;span class='p'&gt;()&amp;lt;&lt;/span&gt;enter&lt;span class='p'&gt;&amp;gt;&amp;lt;&lt;/span&gt;enter&lt;span class='p'&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this configuration is a bit ugly, it saves me the inconvenience of having a bunch of abbreviations lying around and makes the substitution transparent to me.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve only been using this for a few hours but I haven&amp;#8217;t hit any issues thus far. If you try this out and have problems or if you know of a way to simplify it please let me know in the comments.&lt;/p&gt;
      </description>
      <author>randy@rsontech.net (Randy Morris)</author>
      <pubDate>Wed, 03 Aug 2011 00:00:00 -0400</pubDate>
      <guid>http://rsontech.net//2011/08/03/lowercase-user-defined-commands.html</guid>
    </item>
    
  </channel>
</rss>
